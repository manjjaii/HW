
//필수 기능

#include <iostream>
#include<string>
#include<vector>

using namespace std;

template<typename T> //타입에 의존하지 않고 데이터를 받을 수 있기 위해서 템플릿 클래스를 정의한다.

class SimpleVector {
private:
	T* data;//T형 원소들을 저장하는 동적 배열 포인터이다.
	int cap;//현재 배열의 전체 용량(capacity)
	int count;//현재 저장된 원소의 개수(size)

public:
	SimpleVector() {
		cap = 10;//조건에 맞춰 기본생성자는 크기가 10이다.
		count = 0;//현재 저장된 원소의 개수는 초기화 시키고
		data = new T[cap];//T라는 불특정된 타입의 배열을 동적으로 만들어주는 코드. new로 열어준다.
	}
	SimpleVector(int n) {
		cap = n;//숫자를 하나 받는 생성자는 해당 숫자에 해당하는 크기의 배열을 만든다. 생성자 오버로딩을 해준다.
		count = 0;
		data = new T[cap];

	}
	~SimpleVector() {
		delete[] data;//소멸자를 불러 클래스가 끝날때 new로 생성한 배열을 해제시켜준다.

	}

	void push_back(const T& value) {//복사 비용이 크니까 참조를 사용해서 T라는 타입의 value를 벡터 맨뒤에 추가해준다. 
		if (count >= cap) {//배열의 크기가 꽉찼으면
			return;//아무 동작도 하지 않는다.
		}
		data[count] = value;//배열 크기 끝에 value원소를 추가시킨다.
		count++;//추가된 원소만큼 크기가 증가하니까 count를 증가시킨다.

	}

	void pop_back() {//마지막 원소를 제거한다는 의미의 pop_back을 사용하는데
		if (count <= 0) {//마찬가지로 제거할 원소가 없다면 아무 동작도 하지않는다.
			return;
		}
		count--;//원소를 넣어도 증가하지 않도록 count만 줄인다.
	}
	int size() const {// const를 붙이는건 이 함수가 멤버 변수를 변경하지 않는다는 의미
		return count;//현재 벡토에 들어있는 원소의 개수를 반환한다
	}
	int capacity() const {
		return cap;//현재 배열의 전체 용량을 반환한다.
	}

};

//도전 기능


#include <iostream>
#include<string>
#include<algorithm>


using namespace std;

template<typename T> //타입에 의존하지 않고 데이터를 받을 수 있기 위해서 템플릿 클래스를 정의한다.

class SimpleVector {
private:
	T* data;//T형 원소들을 저장하는 동적 배열 포인터이다.
	int cap;//현재 배열의 전체 용량(capacity)
	int count;//현재 저장된 원소의 개수(size)

public:

	SimpleVector() {
		cap = 10;//조건에 맞춰 기본생성자는 크기가 10이다.
		count = 0;//현재 저장된 원소의 개수는 초기화 시키고
		data = new T[cap];//T라는 불특정된 타입의 배열을 동적으로 만들어주는 코드. new로 열어준다.
	}
	SimpleVector(int n) {
		cap = n;//숫자를 하나 받는 생성자는 해당 숫자에 해당하는 크기의 배열을 만든다. 생성자 오버로딩을 해준다.
		count = 0;
		data = new T[cap];

	}

	SimpleVector(const SimpleVector& other) {// 복사 생성자를 선언한다.
		cap = other.cap;//other의 현재 용량(cap)을 내 객체의 용량으로 복사한다.
		count = other.count;//other가 가지고 있는 원소 개수도 복사한다.
		data = new T[cap];
		for (int i = 0; i < count; i++) {
			data[i] = other.data[i];
		}//other의 데이터 배열에 있는 원소를 하나씩 배열에 복사한다. 원소를 실제로 복사하는 깊은 복사이다.
	}
		~SimpleVector() {
			delete[] data;

		}


		void push_back(const T& value) {
			if (count >= cap) {
				resize(cap + 5);//크기가 꽉찼는데도 들어오면 기존배열보다 크기를 5만큼늘린다.
			}
			data[count] = value;
			count++;
		}

	

	void pop_back() {
		if (count <= 0) {
			return;
		}
		count--;
	}
	int size() const {
		return count;
	}
	int capacity() const {
		return cap;
	}
	void resize(int new_cap){//새로 원하는 배열 크기를 new_cap으로 선언
		if (new_cap <= cap) {
			return;//새로운 크기가 현재 크기보다 작거나 같으면 아무것도 안함
		}
	T* new_data = new T[new_cap];//새로운 크기만큼 새 배열 동적 할당 new
	for (int i = 0; i < count; i++) {//기존 배열에 있던 원소를 새 배열로 하나씩 복사한다 반복
		new_data[i] = data[i];
	}
	delete[]data;//기존 배열 메모리 해제
	data = new_data;//기존 멤버 변수 data가 새 배열 new_data를 가리키도록한다
	cap = new_cap;//현재 용량을 새 용량 new_data로 갱신한다.
}

void sortData() {//내부 데이터를 정렬하는 함수 sortData를 선언한다.,
	sort(data, data + count);//STL sort함수를 호출한다. 배열 시작부터 현재 저장된 원소 개수(count)만큼 정렬한다.

}

};

