//-Animal이라는 기본 클래스를 정의 합니다.
//- Animal 클래스에는 `makeSound()`라는 순수 가상 함수를 포함합니다.
//- Animal 클래스를 상속받아 다양한 동물 클래스를 생성합니다.예) Dog, Cat, Cow
//- 각 클래스에서 makeSound()함수를 재정의하여 해당 동물의 소리를 출력합니다.
//- 메인 함수에서 Animal 타입의 포인터 배열을 선언합니다.
// 
//- 자료형의 변수를 선언하고, 배열에 저장해봅니다.
//- Animal 배열을 반복문으로 순회하면서 각 동물의 울음소리를 내게 합니다.


//필수 기능


#include <iostream>
using namespace std;

//기본 클래스를 Animal로 정의한다.
class Animal {
public:
	//makeSound()라는 순수 가상 함수를 포함한다. 자식 클래스에서 재정의가 가능하다.
	virtual void makeSound() = 0;
};

//자식 클래스로 예시가 아닌 crow, wolf, pig 로 해보겠다.
//자식 클래스로 먼저 crow
class crow : public Animal {
public:
	void makeSound() {//각 클래스에서 makeSound를 재정의하며 소리를 출력한다.
		cout << "crow cries: kkak kkak" << endl;
	}
};

class wolf : public Animal {
public:
	void makeSound() {
		cout << "wolf cries: ahwoooo~" << endl;
	}
};

class pig : public Animal {
public:
	void makeSound() {
		cout << "pig cries: ggulggul" << endl;

	}
};

int main() {
	//crow, wolf, pig 객체를 생성한다.
	
	crow croww;
	wolf wolff;
	pig pigg;

//Animal 타입 포인터 배열을 선언하고 객체 주소를 저장한다.
	Animal* animalss[3];
	animalss[0] = &croww;
	animalss[1] = &wolff;
	animalss[2] = &pigg;
	
	//배열을 반복문으로 순회하면서 각 울음소리를 출력한다.
	for (int i = 0; i < 3; i++) {
		animalss[i]->makeSound();

	}
}




//도전 기능 문제
#include <iostream>

using namespace std;


class Animal {
public:
    virtual void makeSound() = 0;
    virtual void move() = 0;//Animal 클래스에서 makesound()와 move()는 가상함수로 정의 되어야 다형성을 통해 실제 객체의 동작이 호출가능
    virtual ~Animal() {}
};

class Zoo {
private:
    Animal* animals[10]; // 동물 객체를 저장하는 포인터 배열, 동물 객체는 animal*형태로 저장되었다.
    int count = 0;        // 현재 저장된 동물의 수 

public:
    // 동물을 동물원에 추가하는 함수 addAnimal
    void addAnimal(Animal* animal) {
        if (count < 10) {
            animals[count++] = animal;//count의 값을 증가시켜 animal배열의 다음 자리에 저장
        }
        else {//자리가 다 차면 더 저장할 수 없다는 안내문구 출력
            cout << "동물원에 더 이상 동물을 추가할 수 없습니다." << endl;
        }
    }

    // 모든 동물의 행동 수행 함수
    void performActions() {
        for (int i = 0; i < count; i++) {//반복문을 통해 모든 동물들이 순차적으로 소리를 내고 움직이는 동작을 실행한다
            animals[i]->makeSound();
            animals[i]->move();
        }
    }

    // 소멸자
    ~Zoo() {
        for (int i = 0; i < count; i++) {
            delete animals[i]; // 동적 할당된 Animal 객체 메모리 해제
        }
    }
};




//도전 문제
.
.
.





